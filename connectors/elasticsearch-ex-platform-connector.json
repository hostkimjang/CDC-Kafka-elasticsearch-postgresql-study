{
  "name": "elasticsearch-ex-platform-connector",
  "config": {
    "connector.class": "io.confluent.connect.elasticsearch.ElasticsearchSinkConnector",
    "connection.url": "http://elasticsearch:9200",
    "type.name": "_doc",
    "topics": "novel-platform-ex_platform_novel",
    "key.ignore": "false",
    "schema.ignore": "true",
    "key.converter": "org.apache.kafka.connect.storage.StringConverter",
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "value.converter.schemas.enable": "false",
    
    "transforms": "extractAfter,addTimestamp,routeIndex",
    
    "transforms.extractAfter.type": "org.apache.kafka.connect.transforms.ExtractField$Value",
    "transforms.extractAfter.field": "after",
    
    "transforms.addTimestamp.type": "org.apache.kafka.connect.transforms.InsertField$Value",
    "transforms.addTimestamp.timestamp.field": "index_timestamp",
    
    "transforms.routeIndex.type": "org.apache.kafka.connect.transforms.RegexRouter",
    "transforms.routeIndex.regex": ".*",
    "transforms.routeIndex.replacement": "ex-platform-novel",
    
    "behavior.on.malformed.documents": "warn",
    "behavior.on.null.values": "ignore",
    "errors.tolerance": "all",
    "errors.log.enable": "true",
    "errors.log.include.messages": "true",
    "batch.size": 100,
    "max.in.flight.requests": 1,
    "flush.timeout.ms": 10000,
    "max.retries": 10,
    "retry.backoff.ms": 1000
  }
} 