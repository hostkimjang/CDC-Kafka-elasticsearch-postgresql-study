services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: postgres-db
    hostname: postgres
    ports:
      - "${POSTGRES_PORT:-6432}:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-novel_platform}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
      - "-c"
      - "max_wal_senders=1"
      - "-c"
      - "max_replication_slots=1"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - cdc-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-novel_platform}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION:-7.5.0}
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "${ZOOKEEPER_PORT:-6181}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - cdc-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION:-7.5.0}
    container_name: kafka-broker
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT:-6092}:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:${KAFKA_PORT:-6092}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - cdc-network

  # Kafka Connect with Debezium + Elasticsearch
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.5.0
    container_name: kafka-connect
    hostname: kafka-connect
    depends_on:
      - kafka
      - postgres
    ports:
      - "${KAFKA_CONNECT_PORT:-6083}:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_GROUP_ID: 1
      CONNECT_CONFIG_STORAGE_TOPIC: connect_configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect_offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect_statuses
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    volumes:
      - kafka_connect_data:/kafka/data
    networks:
      - cdc-network
    command: >
      bash -c "
        echo 'üîß ÌïÑÏàò Ïª§ÎÑ•ÌÑ∞ ÏÑ§Ïπò Ï§ë...'
        
        # Debezium PostgreSQL Ïª§ÎÑ•ÌÑ∞ ÏÑ§Ïπò
        echo 'üì° Debezium PostgreSQL Ïª§ÎÑ•ÌÑ∞ ÏÑ§Ïπò...'
        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.4.2
        
        # Elasticsearch Ïã±ÌÅ¨ Ïª§ÎÑ•ÌÑ∞ ÏÑ§Ïπò
        echo 'üîó Elasticsearch Ïã±ÌÅ¨ Ïª§ÎÑ•ÌÑ∞ ÏÑ§Ïπò...'
        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:15.0.0
        
        echo '‚úÖ Î™®Îì† Ïª§ÎÑ•ÌÑ∞ ÏÑ§Ïπò ÏôÑÎ£å! Kafka Connect ÏãúÏûë...'
        
        # Kafka Connect ÏãúÏûë
        /etc/confluent/docker/run
      "
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/connectors || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 180s

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    hostname: elasticsearch
    ports:
      - "${ES_PORT:-6200}:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - cluster.name=${CLUSTER_NAME:-novel-platform-elasticsearch-cluster}
      - xpack.license.self_generated.type=${LICENSE:-basic}
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    mem_limit: ${MEM_LIMIT:-8589934592}
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - cdc-network
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Kibana (ÏÑ†ÌÉùÏÇ¨Ìï≠ - Elasticsearch Î™®ÎãàÌÑ∞ÎßÅ)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    hostname: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "${KIBANA_PORT:-6601}:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: kibana
      SERVER_HOST: "0.0.0.0"
      XPACK_SECURITY_ENABLED: "false"
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: "fhjskloppd678ehkdfdlliverpoolfcr"
    networks:
      - cdc-network
    restart: unless-stopped

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    hostname: kafka-ui
    depends_on:
      - kafka
      - kafka-connect
    ports:
      - "${KAFKA_UI_PORT:-6080}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - cdc-network

  # ü§ñ Ïª§ÎÑ•ÌÑ∞ ÏûêÎèô ÏÑ§Ï†ï Ï¥àÍ∏∞Ìôî Ïª®ÌÖåÏù¥ÎÑà
  connector-setup:
    image: curlimages/curl:latest
    container_name: connector-setup
    depends_on:
      kafka-connect:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./connectors:/connectors:ro
      - ./connector-init.sh:/connector-init.sh:ro
    environment:
      - KAFKA_CONNECT_URL=http://kafka-connect:8083
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    command: sh /connector-init.sh
    networks:
      - cdc-network
    restart: "no"

networks:
  cdc-network:
    driver: bridge

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  kafka_connect_data:
  elasticsearch_data:
